using Microsoft.AspNetCore.Mvc;

namespace CrudRestApi.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class DogController : ControllerBase
    {
        private static readonly List<DogModel> Dogs =
        [
            new DogModel {Age = 3, Name = "Freezing"},
            new DogModel {Age = 3, Name = "Bracing"},
            new DogModel {Age = 3, Name = "Chilly"},
            new DogModel {Age = 3, Name = "Cool"},
            new DogModel {Age = 3, Name = "Mild"},
            new DogModel {Age = 3, Name = "Warm"}
        ];

        private readonly ILogger<DogController> _logger;

        public DogController(ILogger<DogController> logger)
        {
            _logger = logger;
        }

        [HttpGet(template: "{id}", Name = "GetById")]
        public ActionResult<DogModel> GetById([FromRoute] Guid id)
        {
            var dog = Dogs.SingleOrDefault(x => x.Id == id);   
            return dog is null ? NotFound() : Ok(dog);
        }

        [HttpGet(template: "", Name = "Search")]
        public ActionResult<IEnumerable<DogModel>> Search([FromQuery] string name)
        {
            return Ok(Dogs.Where(x => x.Name.Contains(name)));
        }

        [HttpPost(template: "", Name = "Add")]
        public ActionResult<DogModel> AddDog([FromBody] DogModel dog)
        {
            ArgumentNullException.ThrowIfNull(dog); 
            Dogs.Add(dog);
            // on saving some data could be set on server side , such as "inserted at"
            // or if we used an integer as id and the id is managed in the database as an autoincrement 
            // the id is generated by the server , so it must be returned by this endpoint
            return Ok(dog);
        }

        [HttpPut(template: "{id}", Name = "Update")]
        public ActionResult<DogModel> UpdateDog([FromRoute] Guid id ,[FromBody] DogModelUpdate dog)
        {
            // I use a different class for update, without id , since the id must be put on the url, as per rest standards
            ArgumentNullException.ThrowIfNull(dog);
            var existingDog = Dogs.SingleOrDefault(d => d.Id == id);
            if(existingDog is null)
            {
                return NotFound();
            }   
            Dogs.Remove(existingDog);
            
            // for sure there are more elegant way to do this copy values 
            Dogs.Add(new DogModel { Id = id, Age = dog.Age, Name = dog.Name });
            
            return Ok(dog);
        }

        [HttpDelete(template: "{id}", Name = "Delete")]
        public ActionResult Delete([FromRoute] Guid id)
        {
            var existingDog = Dogs.SingleOrDefault(d => d.Id == id);
            if (existingDog is null)
            {
                return NotFound();
            }
            Dogs.Remove(existingDog);
            // for sure there are more elegant way to do this copy values 

            return Ok();
        }
    }
}
